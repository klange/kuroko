
let _encoder_registry = {}
let _decoder_registry = {}
def register_kuroko_codec(labels, incremental_encoder_class, incremental_decoder_class):
    if incremental_encoder_class and incremental_encoder_class.name not in labels:
        raise ValueError("encoder's name not in label list")
    if incremental_decoder_class and incremental_decoder_class.name not in labels:
        raise ValueError("decoder's name not in label list")
    for label in labels:
        if incremental_encoder_class:
            _encoder_registry[label] = incremental_encoder_class
        if incremental_decoder_class:
            _decoder_registry[label] = incremental_decoder_class

def encode(string, label, errors="strict"):
    return _encoder_registry[label](errors).encode(string, True)

def decode(string, label, errors="strict"):
    return _decoder_registry[label](errors).decode(string, True)

# Constructor is e.g. UnicodeEncodeError(encoding, object, start, end, reason)
# Wouldn't it be wonderful if Python bloody documented that anywhere (e.g. manual or docstring)?
# -- Har.
class UnicodeError(ValueError):
    def __init__(encoding, object, start, end, reason):
        self.encoding = encoding
        self.object = object
        self.start = start
        self.end = end
        self.reason = reason
    def __repr__():
        let c = type(self)
        return f"{c.__name__}({self.encoding!r}, {self.object!r}, {self.start!r}, {self.end!r}, {self.reason!r})"

class UnicodeEncodeError(UnicodeError):
class UnicodeDecodeError(UnicodeError):

let _error_registry = {}

def register_error(name, handler):
    _error_registry[name] = handler

def lookup_error(name):
    return _error_registry[name]

def strict_errors(exc):
    # Raising exc (i.e. a ValueError subclass instance) directly is somehow a segfault atm.
    raise ValueError(repr(exc))
register_error("strict", strict_errors)

def ignore_errors(exc):
    if isinstance(exc, UnicodeEncodeError):
        return (b"", exc.end)
    return ("", exc.end)
register_error("ignore", ignore_errors)

def replace_errors(exc):
    if isinstance(exc, UnicodeEncodeError):
        return (b"?", exc.end) # 0x3F: question mark in ASCII / SUBSTITUTE control code in EBCDIC
    else if isinstance(exc, UnicodeDecodeError):
        return ("\uFFFD", exc.end)
    else:
        raise TypeError("'replace' handler expected UnicodeEncodeError or UnicodeDecodeError")
register_error("replace", replace_errors)

def backslashreplace_errors(exc):
    if isinstance(exc, UnicodeEncodeError):
        # Work around str.format not supporting format specifiers
        let myhex = hex(ord(exc.object[exc.start])).split("x", 1)[1]
        let outhex
        if len(myhex) <= 2:
            outhex = "\\x" + ("0" * (2 - len(myhex))) + myhex
        else if len(myhex) <= 4:
            outhex = "\\u" + ("0" * (4 - len(myhex))) + myhex
        else:
            outhex = "\\U" + ("0" * (8 - len(myhex))) + myhex
        return (outhex.encode(), exc.end)
    else:
        raise TypeError("'backslashreplace' handler is only for encoding")
register_error("backslashreplace", backslashreplace_errors)

def xmlcharrefreplace_errors(exc):
    if isinstance(exc, UnicodeEncodeError):
        return (b"&#" + str(ord(exc.object[exc.start])).encode() + b";", exc.end)
    else:
        raise TypeError("'xmlcharrefreplace' handler is only for encoding")
register_error("xmlcharrefreplace", xmlcharrefreplace_errors)

class ByteCatenator:
    def __init__():
        self.first = self.second = b""
    def add(string):
        if len(self.second) >= len(self.first):
            self.first += self.second
            self.second = b""
        self.second += string
    def getvalue():
        return self.first + self.second

class StringCatenator:
    def __init__():
        self.first = self.second = ""
    def add(string):
        if len(self.second) >= len(self.first):
            self.first += self.second
            self.second = ""
        self.second += string
    def getvalue():
        return self.first + self.second

# Kludge how bytes([number]) doesn't work:
let to_bytes = [b'\x00', b'\x01', b'\x02', b'\x03', b'\x04', b'\x05', b'\x06', b'\x07', b'\x08', b'\t', b'\n', b'\x0b', b'\x0c', b'\r', b'\x0e', b'\x0f', b'\x10', b'\x11', b'\x12', b'\x13', b'\x14', b'\x15', b'\x16', b'\x17', b'\x18', b'\x19', b'\x1a', b'\x1b', b'\x1c', b'\x1d', b'\x1e', b'\x1f', b' ', b'!', b'"', b'#', b'$', b'%', b'&', b"'", b'(', b')', b'*', b'+', b',', b'-', b'.', b'/', b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9', b':', b';', b'<', b'=', b'>', b'?', b'@', b'A', b'B', b'C', b'D', b'E', b'F', b'G', b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O', b'P', b'Q', b'R', b'S', b'T', b'U', b'V', b'W', b'X', b'Y', b'Z', b'[', b'\\', b']', b'^', b'_', b'`', b'a', b'b', b'c', b'd', b'e', b'f', b'g', b'h', b'i', b'j', b'k', b'l', b'm', b'n', b'o', b'p', b'q', b'r', b's', b't', b'u', b'v', b'w', b'x', b'y', b'z', b'{', b'|', b'}', b'~', b'\x7f', b'\x80', b'\x81', b'\x82', b'\x83', b'\x84', b'\x85', b'\x86', b'\x87', b'\x88', b'\x89', b'\x8a', b'\x8b', b'\x8c', b'\x8d', b'\x8e', b'\x8f', b'\x90', b'\x91', b'\x92', b'\x93', b'\x94', b'\x95', b'\x96', b'\x97', b'\x98', b'\x99', b'\x9a', b'\x9b', b'\x9c', b'\x9d', b'\x9e', b'\x9f', b'\xa0', b'\xa1', b'\xa2', b'\xa3', b'\xa4', b'\xa5', b'\xa6', b'\xa7', b'\xa8', b'\xa9', b'\xaa', b'\xab', b'\xac', b'\xad', b'\xae', b'\xaf', b'\xb0', b'\xb1', b'\xb2', b'\xb3', b'\xb4', b'\xb5', b'\xb6', b'\xb7', b'\xb8', b'\xb9', b'\xba', b'\xbb', b'\xbc', b'\xbd', b'\xbe', b'\xbf', b'\xc0', b'\xc1', b'\xc2', b'\xc3', b'\xc4', b'\xc5', b'\xc6', b'\xc7', b'\xc8', b'\xc9', b'\xca', b'\xcb', b'\xcc', b'\xcd', b'\xce', b'\xcf', b'\xd0', b'\xd1', b'\xd2', b'\xd3', b'\xd4', b'\xd5', b'\xd6', b'\xd7', b'\xd8', b'\xd9', b'\xda', b'\xdb', b'\xdc', b'\xdd', b'\xde', b'\xdf', b'\xe0', b'\xe1', b'\xe2', b'\xe3', b'\xe4', b'\xe5', b'\xe6', b'\xe7', b'\xe8', b'\xe9', b'\xea', b'\xeb', b'\xec', b'\xed', b'\xee', b'\xef', b'\xf0', b'\xf1', b'\xf2', b'\xf3', b'\xf4', b'\xf5', b'\xf6', b'\xf7', b'\xf8', b'\xf9', b'\xfa', b'\xfb', b'\xfc', b'\xfd', b'\xfe', b'\xff']

class AsciiIncrementalEncoder:
    # The obvious labels for ASCII are all Windows-1252 per WHATWG. Also, what people call
    # "ASCII" in 8-bit-byte contexts (without backspace combining) is properly ISO-4873-DV.
    name = "ecma-43-dv"
    webname = None
    # For non-ASCII characters (this should work as a base class)
    encoding_map = {}
    def __init__(errors):
        self.errors = errors
    def encode(string, final = False):
        let out = ByteCatenator()
        let offset = 0
        while 1: # offset can be arbitrarily changed by the error handler, so not a for
            if offset >= len(string):
                return out.getvalue()
            let i = string[offset]
            if ord(i) < 0x80:
                out.add(to_bytes[ord(i)])
                offset += 1
            else if ord(i) in self.encoding_map:
                let target = self.encoding_map[ord(i)]
                if isinstance(target, tuple):
                    for individ in target:
                        out.add(to_bytes[individ])
                else:
                    out.add(to_bytes[target])
                offset += 1
            else:
                let error = UnicodeEncodeError(self.name, string, offset, offset + 1, "")
                let errorret = lookup_error(self.errors)(error)
                out.add(errorret[0])
                offset = errorret[1]
                if offset < 0:
                    offset += len(string)
    def reset():
    def getstate():
        return 0
    def setstate(state):
        if state != 0:
            raise ValueError("stateless encoder being set to nonzero state")

class AsciiIncrementalDecoder:
    name = "ecma-43-dv"
    webname = None
    # For non-ASCII single-byte characters (this should work as a base class)
    decoding_map = {}
    dbrange = ()
    tbrange = ()
    trailrange = ()
    def __init__(errors):
        self.errors = errors
    def decode(data, final = False):
        let out = StringCatenator()
        let offset = 0
        let leader = []
        let bytemode = 1
        while 1: # offset can be arbitrarily changed by the error handler, so not a for
            if offset >= len(data):
                if bytemode == 1:
                    return out.getvalue()
                else:
                    let error = UnicodeDecodeError(self.name, data, offset - len(leader), offset + 1, "")
                    let errorret = lookup_error(self.errors)(error)
                    out.add(errorret[0])
                    return out.getvalue()
            let i = data[offset]
            if bytemode == 1 and i < 0x80:
                out.add(chr(i))
                offset += 1
            else if bytemode == 1 and i in self.dbrange:
                bytemode = 2
                leader.append(i)
                offset += 1
            else if bytemode == 1 and i in self.tbrange:
                bytemode = 3
                leader.append(i)
                offset += 1
            else if bytemode == 3 and len(leader) == 1 and i in self.trailrange:
                leader.append(i)
                offset += 1
            else if bytemode == 1 and i in self.decoding_map:
                out.add(chr(self.decoding_map[i]))
                offset += 1
            else if bytemode == 2 and (leader[0], i) in self.decoding_map:
                out.add(chr(self.decoding_map[(leader[0], i)]))
                offset += 1
                bytemode = 1
                leader = []
            else if bytemode == 3 and (leader[0], leader[1], i) in self.decoding_map:
                out.add(chr(self.decoding_map[(leader[0], leader[1], i)]))
                offset += 1
                bytemode = 1
                leader = []
            else:
                let errorstart = offset + 1 - bytemode
                let errorend = errorstart + bytemode
                # Note: per WHATWG behaviour, if an invalid multi-byte code contains an ASCII byte,
                #   parsing shall resume at that byte.
                if bytemode > 1:
                    if len(leader) > 1 and leader[1] < 0x80:
                        errorend -= 2
                    else if i not in self.trailrange or i < 0x80:
                        errorend -= 1
                let error = UnicodeDecodeError(self.name, data, errorstart, errorend, "")
                bytemode = 1
                leader = []
                let errorret = lookup_error(self.errors)(error)
                out.add(errorret[0])
                offset = errorret[1]
                if offset < 0:
                    offset += len(string)
    def reset():
    def getstate():
        return 0
    def setstate(state):
        if state != 0:
            raise ValueError("stateless decoder being set to nonzero state")

register_kuroko_codec(["ecma-43-dv", "iso-4873-dv"], AsciiIncrementalEncoder, AsciiIncrementalDecoder)

class UndefinedIncrementalDecoder:
    name = "undefined"
    webname = "replacement"
    def __init__(errors):
        self.errors = errors
    def decode(data, final = False):
        if len(data) == 0:
            return "" # per WHATWG, contra Python
        let error = UnicodeDecodeError(self.name, data, 0, len(data), "undefined encoding")
        let errorret = lookup_error(self.errors)(error) # per WHATWG, contra Python
        return errorret[0]
    def reset():
    def getstate():
        return 0
    def setstate(state):
        if state != 0:
            raise ValueError("undefined decoder being set to nonzero state")

class UndefinedIncrementalEncoder:
    name = "undefined"
    webname = "replacement"
    # WHATWG doesn't specify an encoder for "replacement" so follow Python "undefined" here.
    # i.e. ignore the errors specifier and always use strict, and fail on even empty strings.
    def __init__(errors):
    def encode(string, final = False):
        let error = UnicodeEncodeError(self.name, string, 0, len(string), "undefined encoding")
        strict_errors(error)
    def reset():
    def getstate():
        return 0
    def setstate(state):
        if state != 0:
            raise ValueError("undefined encoder being set to nonzero state")

register_kuroko_codec(
    ["undefined", "replacement", # "undefined" is Python's label, "replacement" is WHATWG's.
    # WHATWG aliases the following to replacement to prevent their use in injection/XSS attacks.
    # Whether they ought to be so aliased here may warrant evaluation:
     "csiso2022kr", "iso-2022-kr", 
     "hz-gb-2312", 
     "iso-2022-cn", "iso-2022-cn-ext"], 
    UndefinedIncrementalEncoder,
    UndefinedIncrementalDecoder)





