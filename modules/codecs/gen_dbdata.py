import json

with open("indexes.json") as f:
    indices = json.load(f)

aliases = {}

with open("encodings.json") as f:
    for i in json.load(f):
        if i["heading"].startswith("Legacy multi-byte"):
            for enc in i["encodings"]:
                aliases[enc["name"].lower()] = enc["labels"]

template = """
# Generated by gen_dbdata.py from WHATWG encodings.json and indexes.json

from codecs import infrastructure

class {idname}IncrementalEncoder(infrastructure.AsciiIncrementalEncoder):
    name = {mainlabel!r}
    webname = {weblabel!r}
    encoding_map = {encmap!r}

class {idname}IncrementalDecoder(infrastructure.AsciiIncrementalDecoder):
    name = {mainlabel!r}
    webname = {weblabel!r}
    decoding_map = {decmap!r}
    dbrange = {dbrange!r}
    tbrange = {tbrange!r}
    trailrange = {trailrange!r}

infrastructure.register_kuroko_codec(
    {labels!r}, 
    {idname}IncrementalEncoder, 
    {idname}IncrementalDecoder)
"""

decode_eucjp = {}
decode_shiftjis = {}
decode_jis7 = {}
decode_jis7katakana = {}
decode_uhc = {}
encode_eucjp = {}
encode_shiftjis = {}
encode_jis7 = {}
encode_uhc = {}
dbrange_eucjp = (0x8E, *range(0xA1, 0xFE + 1))
dbrange_shiftjis = (*range(0x81, 0x9F + 1), *range(0xE0, 0xFC + 1))
dbrange_uhc = (*range(0x81, 0xFE + 1),)
tbrange_eucjp = (0x8F,)
tbrange_shiftjis = ()
tbrange_uhc = ()
trailrange_eucjp = (*range(0xA1, 0xFE + 1),)
trailrange_shiftjis = (*range(0x40, 0x7E + 1), *range(0x80, 0xFC + 1))
trailrange_uhc = (*range(0x41, 0xFE + 1),) # As WHATWG define it (a superset of the actual range)

# "JIS X 0208" (actually follows _de facto_ Windows-31J)
for pointer, ucs in enumerate(indices["jis0208"]):
    if ucs == None:
        continue
    sku = (pointer // 188) + 1
    sten = (pointer % 188) + 1
    first = 0x80 + sku
    if first >= 0xA0:
        first += 0x40
    second = 0x3F + sten
    if second >= 0x7F:
        second += 1
    decode_shiftjis[(first, second)] = ucs
    if ucs not in encode_shiftjis and not (8272 <= pointer <= 8835):
        encode_shiftjis[ucs] = (first, second)
    ku = (pointer // 94) + 1
    ten = (pointer % 94) + 1
    if ku <= 94:
        firste = 0xA0 + ku
        seconde = 0xA0 + ten
        decode_eucjp[(firste, seconde)] = ucs
        encode_eucjp[ucs] = (firste, seconde)
        first7 = 0x20 + ku
        second7 = 0x20 + ten
        decode_jis7[(first7, second7)] = ucs
        encode_jis7[ucs] = (first7, second7)

# JIS X 0212 (WHATWG includes for decoding only)
for pointer, ucs in enumerate(indices["jis0212"]):
    if ucs == None:
        continue
    ku = (pointer // 94) + 1
    ten = (pointer % 94) + 1
    second = 0xA0 + ku
    third = 0xA0 + ten
    decode_eucjp[(0x8F, second, third)] = ucs

# JIS X 0201 katakana
for i in range(63):
    ucs = 0xFF61 + i
    byte = 0xA1 + i
    decode_shiftjis[byte] = ucs
    encode_shiftjis[ucs] = byte
    decode_eucjp[(0x8E, byte,)] = ucs
    encode_eucjp[ucs] = (0x8E, byte,)
    decode_jis7katakana[0x21 + i] = ucs
    encode_jis7[ucs] = encode_jis7[indices["iso-2022-jp-katakana"][i]]

# Windows-31J's IBM-designated private use area
for i in range(94 * 20):
    pointer = 8836 + i
    ucs = 0xE000 + i
    sku = (pointer // 188) + 1
    sten = (pointer % 188) + 1
    first = 0xC0 + sku
    second = 0x3F + sten
    if second >= 0x7F:
        second += 1
    decode_shiftjis[(first, second)] = ucs

# Unified Hangul Code
for pointer, ucs in enumerate(indices["euc-kr"]):
    if ucs == None:
        continue
    uku = (pointer // 190) + 1
    uten = (pointer % 190) + 1
    first = 0x80 + uku
    second = 0x40 + uten
    decode_uhc[(first, second)] = ucs
    encode_uhc[ucs] = (first, second)

# Special exceptions listed by WHATWG
encode_shiftjis[0xA5] = encode_eucjp[0xA5] = 0x5C
encode_shiftjis[0x203E] = encode_eucjp[0x203E] = 0x7E
encode_shiftjis[0x2212] = encode_shiftjis[0xFF0D]
encode_eucjp[0x2212] = encode_eucjp[0xFF0D]
encode_jis7[0x2212] = encode_jis7[0xFF0D]

# Sanity check
for data, ucs in decode_shiftjis.items():
    assert bytes(data if isinstance(data, tuple) else (data,)).decode(
        "ms-kanji", errors="replace") == chr(ucs), (data, ucs)

with open("shiftjis.krk", "w") as f:
    f.write(template.format(mainlabel="windows-31j", weblabel="shift_jis",
                        labels=aliases["shift_jis"],
                        encmap=encode_shiftjis, decmap=decode_shiftjis, idname="Windows31J",
                        dbrange=dbrange_shiftjis, tbrange=tbrange_shiftjis, 
                        trailrange=trailrange_shiftjis))

with open("eucjp.krk", "w") as f:
    f.write(template.format(mainlabel="x-euc-jp", weblabel="euc-jp", labels=aliases["euc-jp"],
                        encmap=encode_eucjp, decmap=decode_eucjp, idname="XEucJp",
                        dbrange=dbrange_eucjp, tbrange=tbrange_eucjp, 
                        trailrange=trailrange_eucjp))

with open("unifiedhangul.krk", "w") as f:
    f.write(template.format(mainlabel="windows-949", weblabel="euc-kr", labels=aliases["euc-kr"],
                        encmap=encode_uhc, decmap=decode_uhc, idname="Windows949",
                        dbrange=dbrange_uhc, tbrange=tbrange_uhc, 
                        trailrange=trailrange_uhc))



