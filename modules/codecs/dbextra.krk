"""
This module includes some additional variable-width or wide encodings not specified by WHATWG. As 
such, none of the codecs in this module should be used in HTML.
"""

from codecs.extradata import encode_lat1supp, decode_lat1supp, encode_greksupp, decode_greksupp, encode_jis78, decode_jis78, encode_jis90p2, decode_jis90p2, encode_jis00, decode_jis00, encode_jis00p2, decode_jis00p2, encode_jis04, decode_jis04, encode_jis7katakana, encode_gb7, decode_gb7, encode_ksc7, decode_ksc7, encode_nbyte_ebcdic, decode_nbyte_ebcdic, encode_johab_hangul, decode_johab_hangul, encode_johabx_ascii, decode_johabx_ascii, encode_johabx_ebcdic, decode_johabx_ebcdic, encode_euc04, decode_euc04, encode_sjis04, decode_sjis04
from codecs.infrastructure import register_kuroko_codec, ByteCatenator, StringCatenator, UnicodeEncodeError, UnicodeDecodeError, lookup_error, lookup, BaseEbcdicIncrementalEncoder, BaseEbcdicIncrementalDecoder, AsciiIncrementalEncoder, AsciiIncrementalDecoder
from codecs.dbdata import encode_jis7, decode_jis7, decode_jis7katakana
from codecs.bespokecodecs import Iso2022JpIncrementalEncoder, Iso2022JpIncrementalDecoder


class EucJis2004IncrementalEncoder(AsciiIncrementalEncoder):
    name = "euc-jis-2004"
    html5name = None
    encoding_map = encode_euc04

class EucJis2004IncrementalDecoder(AsciiIncrementalDecoder):
    name = "euc-jis-2004"
    html5name = None
    decoding_map = decode_euc04
    dbrange = tupleOf(0x8E, *range(0xA1, 0xFE + 1))
    tbrange = (0x8F,)
    trailrange = tupleOf(*range(0xA1, 0xFE + 1))

register_kuroko_codec(["euc_jis_2004", "jisx0213", "eucjis2004", "euc_jis2004", 
        "euc_jisx0213", "eucjisx0213"],
    EucJis2004IncrementalEncoder, EucJis2004IncrementalDecoder)


class ShiftJis2004IncrementalEncoder(AsciiIncrementalEncoder):
    name = "shift-jis-2004"
    html5name = None
    encoding_map = encode_sjis04
    ascii_exceptions = (0x5C, 0x7E)

class ShiftJis2004IncrementalDecoder(AsciiIncrementalDecoder):
    name = "shift-jis-2004"
    html5name = None
    decoding_map = decode_sjis04
    ascii_exceptions = (0x5C, 0x7E)
    dbrange = (129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 
               146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 224, 225, 226, 
               227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 
               244, 245, 246, 247, 248, 249, 250, 251, 252)
    trailrange = tupleOf(*range(64, 126 + 1), *range(128, 252 + 1))

register_kuroko_codec(["shift_jis_2004", "shiftjis2004", "sjis_2004", "s_jis_2004", 
        "shift_jisx0213", "shiftjisx0213", "sjisx0213", "s_jisx0213"],
    ShiftJis2004IncrementalEncoder, ShiftJis2004IncrementalDecoder)


let encode_johab_ascii = encode_johabx_ascii.copy()
encode_johab_ascii.update(encode_johab_hangul)
class AsciiJohabIncrementalEncoder(AsciiIncrementalEncoder):
    name = "johab-ascii"
    html5name = None
    encoding_map = encode_johab_ascii

let decode_johab_ascii = decode_johabx_ascii.copy()
decode_johab_ascii.update(decode_johab_hangul)
class AsciiJohabIncrementalDecoder(AsciiIncrementalDecoder):
    name = "johab-ascii"
    html5name = None
    decoding_map = decode_johab_ascii
    dbrange = tupleOf(*range(0x84, 0xF9 + 1))
    # Trail ranges for hangul and nonhangul are different, but this is their union.
    trailrange = tupleOf(*range(0x31, 0x7E + 1), *range(0x81, 0xFE + 1))

register_kuroko_codec(["cp1361", "ms1361", "johab", "x-johab", "johab-ascii"],
    AsciiJohabIncrementalEncoder, AsciiJohabIncrementalDecoder)


let encode_johab_ebcdic = encode_johabx_ebcdic.copy()
encode_johab_ebcdic.update(encode_johab_hangul)
class EbcdicJohabIncrementalEncoder(BaseEbcdicIncrementalEncoder):
    name = "johab-ebcdic"
    html5name = None
    sbcs_encode = encode_nbyte_ebcdic
    dbcshost_encode = encode_johab_ebcdic

let decode_johab_ebcdic = decode_johabx_ebcdic.copy()
decode_johab_ebcdic.update(decode_johab_hangul)
class EbcdicJohabIncrementalDecoder(BaseEbcdicIncrementalDecoder):
    name = "johab-ebcdic"
    html5name = None
    sbcs_decode = decode_nbyte_ebcdic
    dbcshost_decode = decode_johab_ebcdic

register_kuroko_codec(["cp933", "ibm-933", "933", "x-IBM933", "ibm-1364", "x-IBM1364",
        "johab-ebcdic"],
    EbcdicJohabIncrementalEncoder, EbcdicJohabIncrementalDecoder)


class JisEncodingIncrementalEncoder(Iso2022JpIncrementalEncoder):
    name = "jis_encoding"
    html5name = None
    encodes_sbcs = [None, None, encode_jis7katakana]
    encodes_dbcs = [None, None, None, encode_jis7, encode_jis78, encode_jis90p2,
                    encode_jis00, encode_jis00p2, encode_jis04, encode_gb7, encode_ksc7]
    encode_supershift_latin = encode_lat1supp
    encode_supershift_greek = encode_greksupp
    super_shift = True
    escs_onebyte = {0: 0x42, 1: 0x4A, 2: 0x49}
    escs_twobyte = {3: 0x42, 4: 0x40, 5: 0x44, 6: 0x4F, 7: 0x50, 8: 0x51, 9: 0x41, 10: 0x43}
    attitude = "eager"

class JisEncodingIncrementalDecoder(Iso2022JpIncrementalDecoder):
    name = "jis_encoding"
    html5name = None
    decodes_sbcs = [None, None, decode_jis7katakana]
    decodes_dbcs = [None, None, None, decode_jis7, decode_jis78, decode_jis90p2,
                    decode_jis00, decode_jis00p2, decode_jis04, decode_gb7, decode_ksc7]
    decode_shiftout = decode_jis7katakana
    decode_supershift_latin = decode_lat1supp
    decode_supershift_greek = decode_greksupp
    # 0x48 is not ASCII or JIS-Roman, but SEN 85 02 00 Annex C. It is however misused for either
    #   ASCII or JIS-Roman in some encoders, so it is a "good idea for software to recognise,
    #   but not to generate" (â€”Lunde) it for JIS-Roman when decoding JIS_encoding.
    escs_onebyte = {0x42: 0, 0x48: 1, 0x49: 2, 0x4A: 1}
    escs_twobyte = {0x40: 4, 0x41: 9, 0x42: 3, 0x43: 10, 0x44: 5, 0x4F: 6, 0x50: 7, 0x51: 8}
    two_byte_modes = [3, 4, 5, 6, 7, 8, 9, 10]
    new_twobytes = True
    shift_out = True
    super_shift = True

register_kuroko_codec(["jis_encoding", "csjisencoding", "jis", "jis7"],
    JisEncodingIncrementalEncoder, JisEncodingIncrementalDecoder)


class Iso2022Jp1IncrementalEncoder(Iso2022JpIncrementalEncoder):
    name = "iso-2022-jp-1"
    html5name = None
    encodes_sbcs = [None, None]
    encodes_dbcs = [None, None, encode_jis90p2, encode_jis7]
    escs_onebyte = {0: 0x42, 1: 0x4A}
    escs_twobyte = {3: 0x42, 2: 0x44}
    attitude = "eager"

register_kuroko_codec(["iso-2022-jp-1", "iso2022-jp-1", "iso2022jp-1"],
    Iso2022Jp1IncrementalEncoder, JisEncodingIncrementalDecoder)


class Iso2022JpExtIncrementalEncoder(Iso2022JpIncrementalEncoder):
    name = "iso-2022-jp-ext"
    html5name = None
    encodes_sbcs = [None, None, encode_jis7katakana]
    encodes_dbcs = [None, None, None, encode_jis90p2, encode_jis7]
    escs_onebyte = {0: 0x42, 1: 0x4A, 2: 0x49}
    escs_twobyte = {4: 0x42, 3: 0x44}
    attitude = "eager"

register_kuroko_codec(["iso-2022-jp-ext", "iso2022-jp-ext", "iso2022jp-ext"],
    Iso2022JpExtIncrementalEncoder, JisEncodingIncrementalDecoder)


class Iso2022Jp2IncrementalEncoder(Iso2022JpIncrementalEncoder):
    name = "iso-2022-jp-2"
    html5name = None
    encodes_sbcs = [None, None]
    encodes_dbcs = [None, None, encode_jis90p2, encode_jis7, encode_gb7, encode_ksc7]
    encode_supershift_latin = encode_lat1supp
    encode_supershift_greek = encode_greksupp
    super_shift = True
    escs_onebyte = {0: 0x42, 1: 0x4A}
    escs_twobyte = {3: 0x42, 2: 0x44, 4: 0x41, 5: 0x43}
    attitude = "eager"

register_kuroko_codec(["iso-2022-jp-2", "iso2022-jp-2", "iso2022jp-2", "csISO2022JP2"],
    Iso2022Jp2IncrementalEncoder, JisEncodingIncrementalDecoder)


# Bit confusing to explain what this bit is doing, so let me explain:
#   The JIS X 0213 variants of ISO-2022-JP should encode to JIS X 0213 before encoding to any
#   extension to JIS X 0208 (assuming they "should" encode to extensions at all). So we remove any
#   characters that are encoded to different locations in JIS X 0213. This also removes certain
#   Unicode characters that are mapped differently by Microsoft/WHATWG versus by JIS X 0213 (e.g.
#   Microsoft mapping the Unicode fullwidth tilde to the JIS wave dash, while JIS X 0213 includes
#   it separately and maps the JIS wave dash to the Unicode wave dash), forcing them to be encoded
#   to JIS X 0213.
let encode_jis7_reduced = {}
for i in encode_jis7.keys():
    if (i not in encode_jis00 or encode_jis00[i] == encode_jis7[i]) and (i not in encode_jis00p2):
        encode_jis7_reduced[i] = encode_jis7[i]


class Iso2022Jp3IncrementalEncoder(Iso2022JpIncrementalEncoder):
    name = "iso-2022-jp-3"
    html5name = None
    encodes_sbcs = [None, None, encode_jis7katakana]
    encodes_dbcs = [None, None, None, encode_jis7_reduced, encode_jis00, encode_jis00p2]
    escs_onebyte = {0: 0x42, 1: 0x4A, 2: 0x49}
    escs_twobyte = {3: 0x42, 4: 0x4F, 5: 0x50}
    attitude = "eager"

register_kuroko_codec(["iso-2022-jp-3", "iso2022-jp-3", "iso2022jp-3"],
    Iso2022Jp3IncrementalEncoder, JisEncodingIncrementalDecoder)


class Iso2022Jp2004IncrementalEncoder(Iso2022JpIncrementalEncoder):
    name = "iso-2022-jp-2004"
    html5name = None
    encodes_sbcs = [None, None, encode_jis7katakana]
    encodes_dbcs = [None, None, None, encode_jis7_reduced, encode_jis00p2, encode_jis04]
    escs_onebyte = {0: 0x42, 1: 0x4A, 2: 0x49}
    escs_twobyte = {3: 0x42, 4: 0x50, 5: 0x51}
    attitude = "eager"

register_kuroko_codec(["iso-2022-jp-2004", "iso2022-jp-2004", "iso2022jp-2004"],
    Iso2022Jp2004IncrementalEncoder, JisEncodingIncrementalDecoder)






