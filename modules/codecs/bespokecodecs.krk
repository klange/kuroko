from codecs.infrastructure import register_kuroko_codec, ByteCatenator, StringCatenator, UnicodeEncodeError, UnicodeDecodeError, lookup_error, lookup
from codecs.dbdata import encode_jis7, decode_jis7, decode_jis7katakana, encode_gbk, decode_gbk, gb_surrogate_ranges
from itertools import enumerate, bytes_iterator

class Gb18030IncrementalEncoder:
    name = "gb18030"
    webname = "gb18030"
    four_byte_codes = True
    def __init__(errors):
        self.errors = errors
    def encode(string, final = False):
        let out = ByteCatenator()
        let offset = 0
        while 1: # offset can be arbitrarily changed by the error handler, so not a for
            if offset >= len(string):
                return out.getvalue()
            let i = string[offset]
            if ord(i) < 0x80:
                out.add(bytes([ord(i)]))
                offset += 1
            else if (not self.four_byte_codes) and (ord(i) == 0x20AC):
                out.add(b"\x80")
                offset += 1
            else if ord(i) in encode_gbk:
                let target = encode_gbk[ord(i)]
                if isinstance(target, tuple):
                    for individ in target:
                        out.add(bytes([individ]))
                else:
                    out.add(bytes([target]))
                offset += 1
            else if (not self.four_byte_codes) or (ord(i) == 0xE5E5):
                let reason = ""
                if not self.four_byte_codes:
                    reason = "character not supported in plain GBK mode"
                else if ord(i) == 0xE5E5:
                    reason = "U+E5E5 corresponds to 0xA3A0, which is mapped to U+3000 as legacy"
                let error = UnicodeEncodeError(self.name, string, offset, offset + 1, reason)
                let errorret = lookup_error(self.errors)(error)
                out.add(errorret[0])
                offset = errorret[1]
                if offset < 0:
                    offset += len(string)
            else:
                let pointer
                if ord(i) == 0xE7C7:
                    pointer = 7457
                else:
                    let basepointer = 0
                    let basecodepoint = 0
                    for nexttuple in gb_surrogate_ranges:
                        let nextpointer = nexttuple[0]
                        let nextcodepoint = nexttuple[1]
                        if nextcodepoint > ord(i):
                            break
                        basepointer = nextpointer
                        basecodepoint = nextcodepoint
                    pointer = (ord(i) - basecodepoint) + basepointer
                let running = pointer
                let first = 0x81 + (running / (10 * 126 * 10))
                running %= 10 * 126 * 10
                let second = 0x30 + (running / (10 * 126))
                running %= 10 * 126
                let third = 0x81 + (running / 10)
                let fourth = 0x30 + (running % 10)
                out.add(bytes([first, second, third, fourth]))
                offset += 1
    def reset():
    def getstate():
        return 0
    def setstate(state):
        if state != 0:
            raise ValueError("stateless encoder being set to nonzero state")

class GbkIncrementalEncoder(Gb18030IncrementalEncoder):
    name = "gbk"
    webname = "gbk"
    four_byte_codes = False

def _get_gbsurrogate_pointer(leader, i):
    let ret = (leader[0] - 0x81) * (10 * 126 * 10)
    ret += (leader[1] - 0x30) * (10 * 126)
    ret += (leader[2] - 0x81) * 10
    ret += i - 0x30
    if (39419 < ret and ret < 189000) or (ret > 1237575): return None
    return ret

class Gb18030IncrementalDecoder:
    name = "gb18030"
    webname = "gb18030"
    pending = b""
    def __init__(errors):
        self.errors = errors
    def decode(data_in, final = False):
        let data = self.pending + data_in
        self.pending = b""
        let out = StringCatenator()
        let offset = 0
        let leader = []
        let bytemode = 1
        while 1: # offset can be arbitrarily changed by the error handler, so not a for
            if offset >= len(data):
                if bytemode == 1:
                    return out.getvalue()
                else if final:
                    let error = UnicodeDecodeError(self.name, data, offset - len(leader), offset,
                                "truncated sequence")
                    let errorret = lookup_error(self.errors)(error)
                    out.add(errorret[0])
                    return out.getvalue()
                else:
                    self.pending = bytes(leader)
                    return out.getvalue()
            let i = data[offset]
            if bytemode == 1 and i < 0x80:
                out.add(chr(i))
                offset += 1
            else if bytemode == 1 and (0x81 <= i and i <= 0xFE):
                bytemode = 2
                leader.append(i)
                offset += 1
            else if bytemode == 1 and i == 0x80:
                out.add("€")
                offset += 1
            else if bytemode == 2 and (leader[0], i) in decode_gbk:
                out.add(chr(decode_gbk[(leader[0], i)]))
                offset += 1
                bytemode = 1
                leader = []
            else if bytemode == 2 and (0x30 <= i and i <= 0x39):
                bytemode = 4
                leader.append(i)
                offset += 1
            else if bytemode == 4 and len(leader) == 2 and (0x81 <= i and i <= 0xFE):
                leader.append(i)
                offset += 1
            else if bytemode == 4 and len(leader) == 3 and _get_gbsurrogate_pointer(leader, i):
                let pointer = _get_gbsurrogate_pointer(leader, i)
                let codepoint
                if pointer == 7457:
                    codepoint = 0xE7C7
                else:
                    let basecodepoint = 0
                    let basepointer = 0
                    for nexttuple in gb_surrogate_ranges:
                        let nextpointer = nexttuple[0]
                        let nextcodepoint = nexttuple[1]
                        if nextpointer > pointer:
                            break
                        basecodepoint = nextcodepoint
                        basepointer = nextpointer
                    codepoint = (pointer - basepointer) + basecodepoint
                out.add(chr(codepoint))
                offset += 1
                bytemode = 1
                leader = []
            else:
                let errorstart = offset - len(leader)
                let errorend = errorstart + bytemode
                # Note: per WHATWG behaviour, if an invalid multi-byte code contains an ASCII byte,
                #   parsing shall resume at that byte.
                if bytemode > 1:
                    if len(leader) > 1:
                        errorend -= 3
                    else if i < 0x80:
                        errorend -= 1
                let error = UnicodeDecodeError(self.name, data, errorstart, errorend, 
                            "invalid sequence")
                bytemode = 1
                leader = []
                let errorret = lookup_error(self.errors)(error)
                out.add(errorret[0])
                offset = errorret[1]
                if offset < 0:
                    offset += len(string)
    def reset():
        self.pending = b""
    def getstate():
        return (self.pending, 0)
    def setstate(state):
        if state[1] != 0:
            raise ValueError("stateless (besides pending buffer) decoder being set to nonzero state")
        self.pending = state[0]

register_kuroko_codec(
    ["gb18030", "chinese", "csgb2312", "csiso58gb231280", "gb2312", "gb_2312", "gb_2312-80",
     "gbk", "iso-ir-58", "x-gbk"], None, Gb18030IncrementalDecoder)
register_kuroko_codec(["gb18030"], Gb18030IncrementalEncoder, None)
register_kuroko_codec(
    ["chinese", "csgb2312", "csiso58gb231280", "gb2312", "gb_2312", "gb_2312-80",
     "gbk", "iso-ir-58", "x-gbk"], GbkIncrementalEncoder, None)

class Iso2022JpIncrementalEncoder:
    name = "iso-2022-jp" # arguably should call it summat else since it's not exactly RFC 1468
    webname = "iso-2022-jp"
    encmap_jis7 = encode_jis7
    # eager: switch to a lower numbered state when possible (à la Python)
    # lazy: switch state only when necessary (à la WHATWG)
    attitude = "lazy"
    # state values:
    # — 0: ASCII
    # — 1: JIS-Roman
    # — 2: JIS-Kanji
    state = None
    def __init__(errors):
        self.errors = errors
        self.state = 0
    def ensure_state_number(state, out):
        if self.state == state:
        else if state == 0:
            out.add(b"\x1B(B")
        else if state == 1:
            out.add(b"\x1B(J")
        else if state == 2:
            out.add(b"\x1B$B")
        else:
            raise ValueError("set to invalid state: " + repr(state))
        self.state = state
    def encode(string, final = False):
        let out = ByteCatenator()
        let offset = 0
        while 1: # offset can be arbitrarily changed by the error handler, so not a for
            if offset >= len(string):
                if final:
                    self.ensure_state_number(0, out)
                return out.getvalue()
            let i = string[offset]
            # Do not pass Shift Out, Shift In or Escape through from data lest this generate
            #   state changes (SO and SI are used in some ISO-2022-JP variants though not this one)
            let is_ascii = ord(i) < 0x80 and i not in ("\x0E\x0F\x1B")
            let is_jiscii = (is_ascii and i not in "\\~") or (i in "¥\u203E")
            let is_jis7 = ord(i) in self.encmap_jis7
            let is_sets = [is_ascii, is_jiscii, is_jis7]
            if (not is_sets[self.state]) or (self.attitude == "eager"):
                for n, j in enumerate(is_sets):
                    if j:
                        self.ensure_state_number(n, out)
                        break
            if not is_sets[self.state]: # i.e. still isn't.
                let error = UnicodeEncodeError(self.name, string, offset, offset + 1,
                            "character not supported by target encoding")
                let errorret = lookup_error(self.errors)(error)
                self.ensure_state_number(0, out)
                out.add(errorret[0])
                offset = errorret[1]
                if offset < 0:
                    offset += len(string)
            else if self.state in [0, 1]:
                # By this point we know whether ASCII or JIS-Roman is appropriate and have switched
                #   to the appropriate one, so we can just treat these the same now.
                let j
                if i == "¥":
                    j = "\\"
                else if i == "\u203E":
                    j = "~"
                else:
                    j = i
                out.add(bytes([ord(j)]))
                offset += 1
            else:
                for individ in self.encmap_jis7[ord(i)]:
                    out.add(bytes([individ]))
                offset += 1
    def reset():
        self.state = 0
    def getstate():
        return self.state
    def setstate(state):
        if state not in [0, 1, 2]:
            raise ValueError("invalid state: " + repr(state))
        self.state = state

class Iso2022JpIncrementalDecoder:
    name = "iso-2022-jp" # arguably should call it summat else since it's not exactly RFC 1468
    webname = "iso-2022-jp"
    decmap_jis7 = decode_jis7
    decmap_jis7katakana = decode_jis7katakana
    # state values:
    # — 0: ASCII
    # — 1: JIS-Roman
    # — 2: JIS-Kanji
    # — 3: JIS-Katakana
    state = None
    pending = b""
    def __init__(errors):
        self.errors = errors
        self.state = 0
    def decode(data_in, final = False):
        let data = self.pending + data_in
        self.pending = b""
        let out = StringCatenator()
        let offset = 0
        let leader = []
        let bytemode = 1
        if self.state == 2:
            bytemode = 2
        while 1: # offset can be arbitrarily changed by the error handler, so not a for
            if offset >= len(data):
                if bytemode in (1, 2):
                    return out.getvalue()
                else if final:
                    let error = UnicodeDecodeError(self.name, data, offset - len(leader), offset,
                                "truncated sequence")
                    let errorret = lookup_error(self.errors)(error)
                    out.add(errorret[0])
                    return out.getvalue()
                else:
                    self.pending = bytes(leader)
                    return out.getvalue()
            let i = data[offset]
            if i == 0x1B and len(leader) == 0:
                bytemode = 3
                leader.append(i)
                offset += 1
            else if bytemode == 3 and len(leader) == 1 and i in (0x24, 0x28):
                leader.append(i)
                offset += 1
            else if bytemode == 3 and len(leader) == 2 and leader[1] == 0x28 and i == 0x42:
                self.state = 0
                bytemode = 1
                leader = []
                offset += 1
            else if bytemode == 3 and len(leader) == 2 and leader[1] == 0x28 and i == 0x4A:
                self.state = 1
                bytemode = 1
                leader = []
                offset += 1
            else if bytemode == 3 and len(leader) == 2 and leader[1] == 0x24 and i in (0x40, 0x42):
                self.state = 2
                bytemode = 2
                leader = []
                offset += 1
            else if bytemode == 3 and len(leader) == 2 and leader[1] == 0x28 and i == 0x49:
                self.state = 3
                bytemode = 1
                leader = []
                offset += 1
            else if bytemode == 2 and len(leader) == 0:
                leader.append(i)
                offset += 1
            else if bytemode == 1 and self.state == 0 and i < 0x80:
                out.add(chr(i))
                offset += 1
            else if bytemode == 1 and self.state == 1 and i < 0x80:
                let char = chr(i)
                if char == "\\":
                    char = "¥"
                else if char == "~":
                    char = "\u203E"
                out.add(char)
                offset += 1
            else if bytemode == 1 and i in self.decmap_jis7katakana:
                out.add(chr(self.decmap_jis7katakana[i]))
                offset += 1
            else if bytemode == 2 and (leader[0], i) in self.decmap_jis7:
                out.add(chr(self.decmap_jis7[(leader[0], i)]))
                offset += 1
                leader = []
            else:
                let errorstart = offset - len(leader)
                let errorend
                if bytemode == 2 and i != 0x1B:
                    errorend = errorstart + 2
                else:
                    errorend = errorstart + 1
                let error = UnicodeDecodeError(self.name, data, errorstart, errorend,
                            "invalid sequence")
                if bytemode != 2:
                    bytemode = 1
                leader = []
                let errorret = lookup_error(self.errors)(error)
                out.add(errorret[0])
                offset = errorret[1]
                if offset < 0:
                    offset += len(string)
    def reset():
        self.state = 0
        self.pending = b""
    def getstate():
        return (self.pending, self.state)
    def setstate(state):
        if state[1] not in [0, 1, 2, 3]:
            raise ValueError("invalid state: " + repr(state))
        self.pending = state[0]
        self.state = state[1]

register_kuroko_codec(["iso-2022-jp", "csiso2022jp"],
    Iso2022JpIncrementalEncoder, Iso2022JpIncrementalDecoder)

class Utf16IncrementalEncoder:
    name = "utf-16"
    webname = "utf-16"
    encoding_map = {}
    endian = "little"
    include_bom = True
    # -1: BOM not yet emitted if applicable
    #  0: BOM emitted
    state = None
    def __init__(errors):
        self.errors = errors
        self.state = -1
    def push_word(word, out):
        if self.endian == "little":
            out.add(bytes([word & 0xFFFF, (word >> 8) & 0xFFFF]))
        else if self.endian == "big":
            out.add(bytes([(word >> 8) & 0xFFFF, word & 0xFFFF]))
        else:
            raise ValueError("unexpected endian value: " + repr(self.endian))
    def encode(string, final = False):
        let out = ByteCatenator()
        let offset = 0
        if self.include_bom and self.state == -1:
            self.push_word(0xFEFF, out)
        self.state = 0
        while 1: # offset can be arbitrarily changed by the error handler, so not a for
            if offset >= len(string):
                return out.getvalue()
            let i = string[offset]
            if (ord(i) < 0x10000) and not (0xD800 <= ord(i) and ord(i) < 0xE000):
                self.push_word(ord(i), out)
                offset += 1
            else if ord(i) >= 0x10000:
                let astrality = ord(i) - 0x10000
                let lead_surrogate = ((astrality >> 10) & 0x3FF) + 0xD800
                let trail_surrogate = (astrality & 0x3FF) + 0xDC00
                self.push_word(lead_surrogate, out)
                self.push_word(trail_surrogate, out)
                offset += 1
            else: # i.e. trying to encode a surrogate "codepoint"
                let error = UnicodeEncodeError(self.name, string, offset, offset + 1,
                            "isolated surrogate word")
                let errorret = lookup_error(self.errors)(error)
                for i in errorret[0]:
                    self.push_word(i, out)
                offset = errorret[1]
                if offset < 0:
                    offset += len(string)
    def reset():
        self.state = -1
    def getstate():
        return self.state
    def setstate(state):
        if state not in [-1, 0]:
            raise ValueError("invalid state: " + repr(state))
        self.state = state

class Utf16IncrementalDecoder:
    name = "utf-16"
    webname = "utf-16"
    force_endian = None # subclass may set to "little" or "big"
    # -1: expecting BOM
    #  0: LE
    #  1: BE
    state = None
    pending = b""
    def __init__(errors):
        self.errors = errors
        self.state = -1
    def decode(data_in, final = False):
        let data = self.pending + data_in
        self.pending = b""
        let out = StringCatenator()
        let offset = 0
        let leader = []
        let wordmode = 1
        while 1: # offset can be arbitrarily changed by the error handler, so not a for
            if (offset + 1) >= len(data):
                if (wordmode == 1) and (offset >= len(data)):
                    return out.getvalue()
                else if final:
                    let error = UnicodeDecodeError(self.name, data, offset - (len(leader) * 2), 
                                len(data), "truncated sequence")
                    let errorret = lookup_error(self.errors)(error)
                    out.add(errorret[0])
                    return out.getvalue()
                else:
                    let leader_bytes = []
                    for i in leader:
                        if self.state == 1:
                            leader_bytes.append((i >> 8) & 0xFF)
                            leader_bytes.append(i & 0xFF)
                        else:
                            leader_bytes.append(i & 0xFF)
                            leader_bytes.append((i >> 8) & 0xFF)
                    if offset == (len(data) - 1): # i.e. one isolated byte at the end
                        leader_bytes.append(data[offset])
                    self.pending = bytes(leader_bytes)
                    return out.getvalue()
            let i
            if self.state != 1:
                i = data[offset] | (data[offset + 1] << 8)
            else:
                i = data[offset + 1] | (data[offset] << 8)
            if self.state == -1:
                if self.force_endian == "little":
                    self.state = 0 # keep BOM if endian specified, per Python.
                    i = data[offset] | (data[offset + 1] << 8)
                else if self.force_endian == "big":
                    self.state = 1
                    i = data[offset + 1] | (data[offset] << 8)
                else if i == 0xFEFF:
                    self.state = 0
                    i = None
                else if i == 0xFFFE:
                    self.state = 1
                    i = None
                else:
                    self.state = 0 # Default to LE, per WHATWG, contra Unicode
            if i == None:
            else if wordmode == 1 and not (0xD800 <= i and i < 0xE000):
                out.add(chr(i))
                offset += 2
            else if wordmode == 1 and (0xD800 <= i and i < 0xDC00):
                leader.append(i)
                wordmode = 2
                offset += 2
            else if wordmode == 2 and (0xDC00 <= i and i < 0xE000):
                out.add(chr((((leader[0] & 0x3FF) << 10) | (i & 0x3FF)) + 0x10000))
                wordmode = 1
                leader = []
                offset += 2
            else:
                let errorstart = offset - (len(leader) * 2)
                let errorend = errorstart + 2
                let error = UnicodeDecodeError(self.name, data, errorstart, errorend,
                            "isolated surrogate word")
                wordmode = 1
                leader = []
                let errorret = lookup_error(self.errors)(error)
                out.add(errorret[0])
                offset = errorret[1]
                if offset < 0:
                    offset += len(string)
    def reset():
        self.state = -1
        self.pending = b""
    def getstate():
        return (self.pending, self.state)
    def setstate(state):
        if state[1] not in [-1, 0, 1]:
            raise ValueError("invalid state: " + repr(state))
        self.pending = state[0]
        self.state = state[1]

class Utf16BeIncrementalEncoder(Utf16IncrementalEncoder):
    name = "utf-16be"
    webname = "utf-16be"
    endian = "big"
    include_bom = False

class Utf16BeIncrementalDecoder(Utf16IncrementalDecoder):
    name = "utf-16be"
    webname = "utf-16be"
    force_endian = "big"

class Utf16LeIncrementalEncoder(Utf16IncrementalEncoder):
    name = "utf-16le"
    webname = "utf-16le"
    endian = "little"
    include_bom = False

class Utf16LeIncrementalDecoder(Utf16IncrementalDecoder):
    name = "utf-16le"
    webname = "utf-16le"
    force_endian = "little"

# Note: this behaves explicitly differently to WHATWG since WHATWG has the BOM, if present,
#   override *any label at all*, and doesn't specify an encoder for UTF-16. So it aliases UTF-16 to
#   UTF-16LE, while we take UTF-16 as meaning with BOM and UTF-16LE/BE as without, per Python.
register_kuroko_codec(["utf-16", "iso-10646-ucs-2", "ucs-2", "unicode", "csunicode", "u16"],
    Utf16IncrementalEncoder, Utf16IncrementalDecoder)
register_kuroko_codec(["utf-16le", "unicodefeff", "unicodelittleunmarked"],
    Utf16LeIncrementalEncoder, Utf16LeIncrementalDecoder)
register_kuroko_codec(["utf-16be", "unicodefffe", "unicodebigunmarked"],
    Utf16BeIncrementalEncoder, Utf16BeIncrementalDecoder)

class Utf8IncrementalEncoder:
    name = "utf-8"
    webname = "utf-8"
    # -1: expecting BOM
    #  0: Normal
    state = None
    include_bom = False
    def __init__(errors):
        self.errors = errors
        self.state = -1
    def encode(string, final = False):
        # We use UTF-8 natively, so this is fairly simple
        let out = ByteCatenator()
        if self.include_bom and self.state == -1:
            out.add("\uFEFF".encode())
        self.state = 0
        out.add(string.encode())
        return out.getvalue()
    def reset():
        self.state = -1
    def getstate():
        return self.state
    def setstate(state):
        if state not in [-1, 0]:
            raise ValueError("invalid state: " + repr(state))
        self.state = state

class Utf8IncrementalDecoder:
    name = "utf-8"
    webname = "utf-8"
    # -1: expecting BOM
    #  0: Normal
    state = None
    remove_bom = False
    pending = b""
    def __init__(errors):
        self.errors = errors
        self.state = -1
    def decode(data_in, final = False):
        # We use UTF-8 natively, so this only validates it and applies the error handler
        #   (and removes a BOM if remove_bom is set)
        let data = self.pending + data_in
        self.pending = b""
        let out = StringCatenator()
        let running_offset = 0
        if self.remove_bom and self.state == -1 and len(data >= 3):
            if data[0] = 0xEF and data[1] == 0xBB and data[2] == 0xBF:
                running_offset = 3
        let first_offset = running_offset
        let second_offset = running_offset
        self.state = 0
        let countdown = 0
        let trail_byte_bottom = 0x80
        let trail_byte_top = 0xBF
        let dlist = list(bytes_iterator(data))
        let lingering_reason = None
        let bolster = 1
        while running_offset < len(data):
            let is_error = False
            let reason = lingering_reason or "byte does not begin valid sequence"
            lingering_reason = None
            if countdown == 0:
                if data[running_offset] < 0x80:
                else if 0xC2 <= data[running_offset] and data[running_offset] <= 0xDF:
                    countdown = 1
                else if 0xE0 <= data[running_offset] and data[running_offset] <= 0xEF:
                    if data[running_offset] == 0xE0: 
                        trail_byte_bottom = 0xA0
                        lingering_reason = "start of overlong sequence"
                    else if data[running_offset] == 0xED: 
                        trail_byte_top = 0x9F # exclude isolated surrogates
                        lingering_reason = "start of sequence for surrogate code point"
                    countdown = 2
                else if 0xF0 <= data[running_offset] and data[running_offset] <= 0xF4:
                    if data[running_offset] == 0xF0: 
                        trail_byte_bottom = 0x90
                        lingering_reason = "start of overlong sequence"
                    else if data[running_offset] == 0xF4: 
                        trail_byte_top = 0x8F
                        lingering_reason = "start of sequence beyond Unicode"
                    countdown = 3
                else:
                    is_error = True
                    if 0x80 <= data[running_offset] and data[running_offset] <= 0xBF:
                        reason = "isolated trail byte"
                    else if data[running_offset] in (0xC0, 0xC1):
                        reason = "start of overlong sequence"
                    else if 0xF5 <= data[running_offset] and data[running_offset] <= 0xFD:
                        reason = "start of sequence beyond Unicode"
                    else: reason = "invalid lead byte"
            else:
                if not (trail_byte_bottom <= data[running_offset] and data[running_offset] <= trail_byte_top):
                    is_error = True
                    if not (0x80 <= data[running_offset] and data[running_offset] <= 0xBF):
                        reason = "not followed by trail byte"
                        bolster -= 1
                trail_byte_bottom = 0x80
                trail_byte_top = 0xBF
                countdown -= 1
            running_offset += 1
            if is_error:
                out.add(bytes(dlist[first_offset:second_offset]).decode())
                let error = UnicodeDecodeError(self.name, data, second_offset, 
                            second_offset + bolster, reason)
                let errorret = lookup_error(self.errors)(error)
                out.add(errorret[0])
                running_offset = errorret[1]
                if running_offset < 0:
                    running_offset += len(string)
                countdown = 0
                bolster = 1
                first_offset = running_offset
                second_offset = running_offset
            else if countdown == 0:
                second_offset = running_offset
                bolster = 1
            else:
                bolster += 1
        out.add(bytes(dlist[first_offset:second_offset]).decode())
        if second_offset < len(data):
            self.pending = bytes(dlist[second_offset:])
        return out.getvalue()
    def reset():
        self.state = -1
        self.pending = b""
    def getstate():
        return (self.pending, self.state)
    def setstate(state):
        if state[1] not in [-1, 0]:
            raise ValueError("invalid state: " + repr(state))
        self.pending = state[0]
        self.state = state[1]

class Utf8SigIncrementalEncoder(Utf8IncrementalEncoder):
    name = "utf-8-sig"
    webname = None
    include_bom = True

class Utf8SigIncrementalDecoder(Utf8IncrementalDecoder):
    name = "utf-8-sig"
    webname = None
    remove_bom = True

register_kuroko_codec(["unicode-1-1-utf-8", "unicode11utf8", "unicode20utf8", "utf-8", "utf8", 
                       "x-unicode20utf8", "u8", "utf", "cp65001", "utf8-ucs4", "utf8mb4"],
    Utf8IncrementalEncoder, Utf8IncrementalDecoder)
register_kuroko_codec(["utf-8-sig"], Utf8SigIncrementalEncoder, Utf8SigIncrementalDecoder)



